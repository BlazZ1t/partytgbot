from telegram import Update
from telegram.ext import (ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, Application)

from bot.database.mongo import get_users_col, get_events_col
from bot.models.event import Event
from bot.utils.permissions import is_admin
import uuid
from datetime import datetime
from bot.utils.time import is_valid_datetime_string

(
    GET_NAME, GET_DESCRIPTION, GET_DISTRICT, GET_DATETIME, GET_ADDRESS, GET_CAPACITY
) = range(6)

async def start_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    user = get_users_col().find_one({"_id": user_id})
    if not user:
        await update.message.reply_text("–í–∏–¥–∏–º–æ —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /register!")
        return ConversationHandler.END
    
    active_events = get_events_col().count_documents({
        "host_id": user_id,
        "cancelled": False,
        "expired": False,
    })
    if active_events >= 5 and not is_admin(user_id):
        await update.message.reply_text("–¢—ã –¥–µ—Ä–∂–∏—à—å —É–∂–µ 5 —Ç—É—Å–æ–≤–æ–∫. –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—èüòû")
        return ConversationHandler.END
    
    await update.message.reply_text("–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º —à–∞—à–ª?")
    return GET_NAME

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏ —Å–≤–æ—é –Ω–µ–≤—ä–µ–±–µ–Ω–Ω—É—é —Ö—É–µ—Ç—É (–±–µ–∑ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–± –µ–±–ª–∞–Ω—ã –Ω–µ –ø—Ä–∏—à–ª–∏ –≤ 2 –Ω–æ—á–∏)")
    return GET_DESCRIPTION

async def get_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —à–∞—à–ª (—ç—Ç–æ —á—Ç–æ–±—ã –ª—é–¥–∏ –ø–æ–Ω–∏–º–∞–ª–∏ –≤ –∫–∞–∫—É—é –∑–∞–ª—É–ø—É –∏–º –µ—Ö–∞—Ç—å)")
    return GET_DISTRICT

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["district"] = update.message.text
    await update.message.reply_text("–ê —Ç–µ–ø–µ—Ä—å —ë–±–Ω–∏ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å. –ß—É—Ä–∫–∏ —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ä–µ—à–∞—Ç –ø—Ä–∏–π—Ç–∏")
    return GET_ADDRESS

async def get_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–ö–æ–≥–¥–∞ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Ç–≤–æ—è —Ö—É–π–Ω—è? –ü–æ–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –Ω–æ—Ä–º —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –µ–±–ª–∞–Ω—ã –∫–∞–∫ —Ç—ã –Ω–µ –ø—Ä–æ—ë–±—ã–≤–∞–ª–∏—Å—å. –ü–æ–∫–∞ —á—Ç–æ –ø–∏—à–∏ –ø–æ —Ç–∏–ø—É 17-06-2025-18:00")
    return GET_DATETIME

async def get_capacity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["time"] = datetime.strptime(update.message.text, "%d-%m-%Y-%H:%M")
    except ValueError as e:
        await update.message.reply_text("EBLAN! –§–æ—Ä–º–∞—Ç –ø—Ä–æ–≤–µ—Ä—å —Å—É–∫–∞. 17-06-2025-18:00")
        return GET_DATETIME
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –≥–æ—Ç–æ–≤ –≤–º–µ—Å—Ç–∏—Ç—å –≤ —Å–≤–æ—é –±–æ–≥–æ–¥–µ–ª—å–Ω—é?")
    return GET_CAPACITY

async def finalyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data["capacity"] = int(update.message.text)
    except ValueError as e:
        await update.message.reply_text("–ï–±–∞—Ç—å –¥—É—Ä–µ–Ω—å, —Ü–∏—Ñ–µ—Ä–∫–∞–º–∏ –ø–∏—à–∏")
        return GET_CAPACITY
    await update.message.reply_text("–í—Å—ë, –∑–∞–µ–±–∏—Å—å, –∑–∞—Ä–µ–≥–∞–ª–∏, –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å\n" \
    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['name']}\n" \
    f"–î–∞—Ç–∞: {context.user_data['time']}\n" \
    f"–ê–¥—Ä–µ—Å: {context.user_data['address']}, {context.user_data['district']}\n" \
    f"–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['description']} \n" \
    "\n–ü—Ä–æ–≤–µ—Ä–∫—É –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º")

    user_id = update.effective_user.id
    user_data = context.user_data
    now = datetime.utcnow()

    event = Event(
        _id=str(uuid.uuid4()),
        name=user_data["name"],
        description=user_data["description"],
        district=user_data["district"],
        event_datetime=user_data["time"],
        address=user_data["address"],
        created_at=now,
        expired=False,
        canceled=False,
        capacity=user_data["capacity"],
        host_id=user_id,
        guests=[],
        invite_links=[],
    )

    get_events_col().insert_one(event.model_dump(by_alias=True))
    get_users_col().update_one(
        {"_id": user_id},
        {"$push": {"hosted_events": event.id}}
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í—Å—ë —Ä–∞–≤–Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—à—ë–ª –±—ã, —Å—É–∫–∞')
    return ConversationHandler.END

def register(app: Application):
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("create_event", start_creation)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            GET_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_district)],
            GET_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            GET_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_datetime)],
            GET_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_capacity)],
            GET_CAPACITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, finalyze)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)

