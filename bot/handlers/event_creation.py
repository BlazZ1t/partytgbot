from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler,
    MessageHandler, CallbackQueryHandler, filters
)
from bot.database.mongo import events_col, users_col
from bot.models.event import Event
from bot.utils.permissions import is_admin
import uuid
import datetime

# Define states
(
    GET_NAME, GET_DESCRIPTION, GET_DISTRICT,
    GET_DATETIME, GET_ADDRESS, GET_CAPACITY,
    CONFIRM_EVENT
) = range(7)

async def start_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_draft"] = {}
    user_id = update.effective_user.id

    user = users_col.find_one({"_id": user_id})
    if not user:
        await update.message.reply_text("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /register —Å–Ω–∞—á–∞–ª–∞.")
        return ConversationHandler.END

    # Check active event limit unless admin
    active_events = events_col.count_documents({
        "host_id": user_id,
        "canceled": False,
        "expired": False
    })
    if active_events >= 5 and not is_admin(user_id):
        await update.message.reply_text("–¢—ã —É–∂–µ —Ö–æ—Å—Ç–∏—à—å 5 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è üòû")
        return ConversationHandler.END

    await update.message.reply_text("–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?")
    return GET_NAME

async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_draft"]["name"] = update.message.text
    await update.message.reply_text("–î–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é (–ù–µ –ø–∏—à–∏ –∑–¥–µ—Å—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏):")
    return GET_DESCRIPTION

async def get_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_draft"]["description"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?")
    return GET_DISTRICT

async def get_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_draft"]["district"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):")
    return GET_DATETIME

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_draft"]["datetime"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")
    return GET_ADDRESS

async def get_capacity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_draft"]["address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–∏—Å–ª–æ):")
    return GET_CAPACITY

async def get_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_draft"]["capacity"] = update.message.text
    return await show_confirmation(update, context)

async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    draft = context.user_data["event_draft"]
    text = (
        f"üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
        f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {draft['name']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {draft['description']}\n"
        f"üìç –†–∞–π–æ–Ω: {draft['district']}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {draft['datetime']}\n"
        f"üè† –ê–¥—Ä–µ—Å: {draft['address']}\n"
        f"üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {draft['capacity']}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π –ø—É–Ω–∫—Ç:"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìõ –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"),
         InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton("üìç –†–∞–π–æ–Ω", callback_data="edit_district"),
         InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data="edit_datetime")],
        [InlineKeyboardButton("üè† –ê–¥—Ä–µ—Å", callback_data="edit_address"),
         InlineKeyboardButton("üë• –õ–∏–º–∏—Ç", callback_data="edit_capacity")],
        [InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_event_creation")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_event_creation")]
    ])

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=keyboard)
    else:
        await update.message.reply_text(text, reply_markup=keyboard)

    return CONFIRM_EVENT

async def handle_edit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    field = query.data.split("_", 1)[1]  # e.g., name, description, etc.

    prompts = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        "district": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–π–æ–Ω:",
        "datetime": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:",
        "address": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:",
        "capacity": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
    }

    context.user_data["editing_field"] = field
    await query.edit_message_text(prompts[field])

    return {
        "name": GET_NAME,
        "description": GET_DESCRIPTION,
        "district": GET_DISTRICT,
        "datetime": GET_DATETIME,
        "address": GET_ADDRESS,
        "capacity": GET_CAPACITY
    }[field]

async def save_edited_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = context.user_data.pop("editing_field")
    context.user_data["event_draft"][field] = update.message.text
    return await show_confirmation(update, context)

async def finalize_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    draft = context.user_data["event_draft"]

    user_id = update.effective_user.id
    now = datetime.utcnow()

    event = Event(
        _id=str(uuid.uuid4()),
        name=draft["event_name"],
        description=draft["description"],
        district=draft["district"],
        event_datetime=draft["event_datetime"],
        address=draft["address"],
        created_at=now,
        expired=False,
        canceled=False,
        capacity=draft["capacity"],
        host_id=user_id,
        guests=[],
        invite_links=[]
    )
    events_col.insert_one(event.model_dump())

    # Update user hosted_events
    users_col.update_one(
        {"_id": user_id},
        {"$push": {"hosted_events": event._id}}
    )
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

    context.user_data.pop("event_draft", None)
    return ConversationHandler.END

async def cancel_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.pop("event_draft", None)
    return ConversationHandler.END

def get_event_creation_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("create_event", start_event_creation)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            GET_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_district)],
            GET_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_datetime)],
            GET_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            GET_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_capacity)],
            GET_CAPACITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_confirmation)],
            CONFIRM_EVENT: [
                CallbackQueryHandler(handle_edit_callback, pattern="^edit_"),
                CallbackQueryHandler(finalize_event_creation, pattern="^confirm_event_creation$"),
                CallbackQueryHandler(cancel_event_creation, pattern="^cancel_event_creation$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_event_creation)],
        allow_reentry=True
    )
